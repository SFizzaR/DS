#include <iostream>

using namespace std;

class ListNode {
public:
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        // Create three dummy nodes for each partition
        ListNode* lessHead = new ListNode(0);
        ListNode* equalHead = new ListNode(0);
        ListNode* greaterHead = new ListNode(0);

        ListNode* less = lessHead;
        ListNode* equal = equalHead;
        ListNode* greater = greaterHead;

        ListNode* current = head;

        while (current != NULL) {
            if (current->val < x) {
                less->next = current;
                less = less->next;
            } else if (current->val == x) {
                equal->next = current;
                equal = equal->next;
            } else {
                greater->next = current;
                greater = greater->next;
            }
            current = current->next;
        }

        // Connect the three partitions
        less->next = equalHead->next;
        equal->next = greaterHead->next;
        greater->next = NULL;

        // Get the head of the new linked list
        head = lessHead->next;

        // Clean up dummy nodes
        delete lessHead;
        delete equalHead;
        delete greaterHead;

        return head;
    }
};

// Helper function to print the linked list
void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        cout << current->val << " -> ";
        current = current->next;
    }
    cout << "NULL" << endl;
}

int main() {
    // Create the input linked list
    ListNode* head = new ListNode(1);
    head->next = new ListNode(4);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(2);
    head->next->next->next->next = new ListNode(5);
    head->next->next->next->next->next = new ListNode(2);
    head->next->next->next->next->next->next = new ListNode(3);

    int x = 3;

    Solution solution;
    ListNode* result = solution.partition(head, x);

    cout << "Partitioned Linked List:" << endl;
    printList(result);

    // Clean up memory
    while (result != NULL) {
        ListNode* temp = result;
        result = result->next;
        delete temp;
    }

    return 0;
}
